/*
 * @Author: JonsonXu
 * @Date: 2019-11-21 14:44:29
 * @Last Modified by: JonsonXu
 * @Last Modified time: 2019-11-21 18:57:22
 */
 {
	"Print Demo": {
		"description": "",
		"prefix": "",
		"body": [
			""
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// GSP
	// ------------------------------------------------------------------------------------------------------------------
	// template: gsp.application.invoke
	"Print gsp.application.invoke": {
		"description": "模板: gsp.application.invoke 不同表单方法之间调用",
		"prefix": "temp gsp.application.invoke",
		"body": [
			"gsp.application.invoke({",
			"\ttarget: '$1',",
			"\tmethodName: '$2',",
			"\tscope: '${3:Iframe1}',",
			"\tparams: [$4]",
			"});"
		]
	},
	// template: self.context.invoke
	"Print self.context.invoke": {
		"description": "模板: self.context.invoke 同表单方法之间调用",
		"prefix": "temp self.context.invoke",
		"body": [
			"self.context.invoke({",
			"\ttarget: '$1',",
			"\tmethodName: '$2',",
			"\tparams: [$4]",
			"});"
		]
	},
	"Print conditionStr": {
		"description": "模板: 组织平台过滤条件字符串",
		"prefix": "temp condition string",
		"body": [
			"var conditionArr = [];",
			"conditionArr.push({",
			"\t\"Lbracket\": \"\",",
			"\t\"Compare\": \"\",",
			"\t\"Field\": \"\",",
			"\t\"DataType\": \"String\",",
			"\t\"Value\": \"\",",
			"\t\"Rbracket\": \" \",",
			"\t\"Relation\": \"\",",
			"\t\"IsCanChange\": true,",
			"\t\"ConvertUpperToCompare\": false,",
			"\t\"Expresstype\": 0,",
			"\t\"FieldCaption\": \"\",",
			"\t\"InnerFormula\": \"\",",
			"\t\"Owner\": \"\",",
			"\t\"DisplayValue\": \"\",",
			"\t\"Description\": \"\"",
			"});",
			"var condition = JSON.stringify(conditionArr);"
		]
	},
	"Print conditionFunction": {
		"description": "模板: 组织平台过滤条件函数",
		"prefix": "temp conditon function",
		"body": [
			""
		]
	},
	// 模板: 平台打开新tab页方法
	"Print gsp.rtf.func.openUrl": {
		"description": "模板: 平台打开新tab页方法",
		"prefix": "temp gsp.rtf.func.openUrl",
		"body": [
			"var tabName = '$1';",
			"var id = ${2: createGuid()};",
			"var url = '/cwbase/web/zj/$3';",
			"gsp.rtf.func.openUrl({ id: id, tabName: tabName, url: url, reload: true });"
		]
	},
	// 模板: 平台获取当前业务操作ID
	"Print gsp.rtf.context.get('bizOpId')": {
		"description": "模板: 平台获取当前业务操作ID",
		"prefix": "var gsp.rtf.context.get('bizOpId')",
		"body": [
			"var bizOpId = gsp.rtf.context.get('bizOpId');"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// ADP
	// ------------------------------------------------------------------------------------------------------------------
	// adp.number.toChineseMoney(123123)
	// ------------------------------------------------------------------------------------------------------------------
	// ZJ
	// ------------------------------------------------------------------------------------------------------------------
	"Print zj.rtf.invokeAOPMethod": {
		"description": "模板: 资金 服务端请求方法",
		"prefix": "temp zj.rtf.invokeAOPMethod",
		"body": [
			"var params = [$4];",
			"zj.rtf.invokeAOPMethod('$1',",
			"\t'$1$2',",
			"\t'$3', params)",
			"\t.then(function (result) {",
			"\t\tif (result && result.MedReturn) {",
			"\t\t\tvar medReturn = result.MedReturn;$5",
			"\t\t}",
			"\t})"
		],
	},
	"Print zj.rtf.createLockObj": {
		"description": "声明：资金 创建服务端请求单条锁对象",
		"prefix": "var zj.rtf.createLockObj",
		"body": [
			"var lockID = $1;",
			"var lockObj = zj.rtf.createLockObj('ZJGX', lockID, 'A');"
		]
	},
	"Print zj.formHelper.addDataLock": {
		"description": "模板：资金 formHelper单条加锁",
		"prefix": "temp zj.formHelper.addDataLock",
		"body": [
			"var lockID = $1;",
			"zj.formHelper.addDataLock('ZJGX', lockID).then(function () {$2});",
		]
	},
	"Print taurus.aop.createLockObj": {
		"description": "声明：资金 创建批量加锁对象",
		"prefix": ["var taurus.aop.createLockObj", "var batchLockObj"],
		"body": [
			"var lockIDs = [];",
			"var batchLockObj = [{",
			"\tDataType: '${1:ZJJSDJ}',",
			"\tLockType: 'A',",
			"\tDataID: lockIDs,",
			"\tMsgField: '${1:ZJJSDJ}_${2:DJBH}',",
			"\tPrimaryKeyFiled: '${1:ZJJSDJ}_${3:DJNM}'",
			"}];",
		]
	},
	"Print taurus.formHelper.addBetchDataLock": {
		"description": "模板：资金 formHelper批量加锁",
		"prefix": "temp taurus.formHelper.addBetchDataLock",
		"body": [
			"var lockObj = taurus.aop.createLockObj(batchLockObj);",
			"taurus.formHelper.addBetchDataLock(lockObj).then(function(result) {",
			"\tif (result.AOPPreMsg.length > 0) {",
			"\t\tvar AOPPreMsg = JSON.parse(result.AOPPreMsg)",
			"\t\tif(AOPPreMsg.${1:ZJJSDJ}) {",
			"\t\t\t$.each(AOPPreMsg.${1:ZJJSDJ}, function(i, val) {",
			"\t\t\t\t$.notify.info(val.CLJG);",
			"\t\t\t})",
			"\t\t} else {",
			"\t\t\t$.notify.info(result.AOPPreMsg);",
			"\t\t}",
			"\t\treturn false;",
			"\t} ",
			"\telse {$4}",
			"})",
		]
	},
	"Print taurus.formHelper.releaseBetchDataLock": {
		"description": "模板：资金 创建批量解锁对象",
		"prefix": "temp taurus.formHelper.releaseBetchDataLock",
		"body": [
			"var batchLockObj = [{",
			"\tDataType: '${1:ZJJSDJ}',",
			"\tLockType: 'R',",
			"\tDataID: [],",
			"\tMsgField: 'ZJJSDJ_DJBH',",
			"\tPrimaryKeyFiled: 'ZJJSDJ_DJNM'",
			"}];",
			"var lockObj = taurus.aop.createLockObj(batchLockObj);",
			"taurus.formHelper.releaseBetchDataLock(lockObj);",
		]
	},
	"Print zj.formHelper.registFrameCloseLock": {
		"description": "声明：资金 注册页面关闭解锁事件",
		"prefix": "var zj.formHelper.registFrameCloseLock",
		"body": [
			"var lockID = $1;",
			"var lockObj = zj.rtf.createLockObj('ZJGX', lockID, 'R');",
			"zj.formHelper.registFrameCloseLock(self, lockObj, $2);",
		]
	},
	"Print taurus.formHelper.openMenu": {
		"description": "声明：资金 打开新tab页方法",
		"prefix": "temp taurus.formHelper.openMenu",
		"body": [
			"var tabName = '$1';",
			"var url = '/cwbase/web/zj/$2';",
			"taurus.formHelper.openMenu(url, tabName);"
		]
	},
	"Print zj.formHelper.registCardHelpEventShieldStateMachine": {
		"description": "模板：资金 注册卡片帮助",
		"prefix": "temp zj.formHelper.registCardHelpEventShieldStateMachine",
		"body": [
			"var helpID = ['$1'];",
			"var events = [self.$2];",
			"zj.formHelper.registCardHelpEventShieldStateMachine(self, helpID, events);",
		]
	},
	"Print zj.formHelper.registListHelpEventShieldStateMachine": {
		"description": "模板：资金 注册列表帮助",
		"prefix": "temp zj.formHelper.registListHelpEventShieldStateMachine",
		"body": [
			"var helpID = ['$1'];",
			"var events = [self.$2];",
			"zj.formHelper.registListHelpEventShieldStateMachine(self, helpID, events);",
		]
	},
	"Print zj.formHelper.regCardNumberFocus": {
		"description": "模板：资金 注册卡片的数字输入框在获取焦点时自动全选",
		"prefix": "temp zj.formHelper.regCardNumberFocus",
		"body": [
			"zj.formHelper.regCardNumberFocus();",
		]
	},
	"Print zj.formHelper.confirm": {
		"description": "模板：资金 确认弹框",
		"prefix": "temp zj.formHelper.confirm",
		"body": [
			"zj.formHelper.confirm(${1:'确认？'}, true).then(function () {$2}).fail(function () {",
			"\tself.context.setParam('cancelTransit', true);$3",
			"});",
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// ZJGX
	// ------------------------------------------------------------------------------------------------------------------
	"Print zj.zjgx.bzlx": {
		"description": "模板：资金共享 报账单类型内码",
		"prefix": "temp zj.zjgx.bzlx",
		"body": [
			"var ${1:fkd} = zj.zjgx.bzlx.${1:fkd}",
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// var
	// ------------------------------------------------------------------------------------------------------------------
	"Print self": {
		"description": "声明: self",
		"prefix": "var self",
		"body": [
			"var self = this;"
		]
	},
	"Print getUtlParam": {
		"description": "声明: 获取URL参数",
		"prefix": "var getUrlParam",
		"body": [
			"var $1 = self.getUrlParam('$1');"
		]
	},
	"Print getGlobalObj": {
		"description": "声明: 获取全局变量",
		"prefix": "var getGlobalObj",
		"body": [
			"var $1 = self.getGlobalObj('$2');"
		]
	},
	"Print setGlobalObj": {
		"description": "声明: 设置全局变量",
		"prefix": "setGlobalObj",
		"body": [
			"// notice: 目前平台更推荐使用 updateGlobalObj 的写法",
			"self.setGlobalObj('$1', $2);"
		]
	},
	"Print updateGlobalObj": {
		"description": "声明: 更新全局变量",
		"prefix": "updateGlobalObj",
		"body": [
			"self.updateGlobalObj('$1', '$2', true);"
		]
	},
	"Print getParam": {
		"description": "声明: 获取表单上下文参数",
		"prefix": "var self.context.getParam",
		"body": [
			"var str$1 = self.context.getParam('$1');"
		]
	},
	"Print setParam": {
		"description": "模板: 设置表单上下文参数",
		"prefix": "self.context.setParam",
		"body": [
			"self.context.setParam('$1', '$2');"
		]
	},
	"Print selfopenMenu": {
		"description": "模板: self打开新tab页方法",
		"prefix": "temp self openMenu",
		"body": [
			"// 定义：listBaseController.js[3369]",
			"var tabName = '$1';",
			"var id = ${2: createGuid()};",
			"var url = '/cwbase/web/zj/$3';",
			"var opts = {};",
			"var reload = true;",
			"self.openMenu(tabName, url, id, opts, reload);"
		]
	},
	"Print getFuncId": {
		"description": "声明: 获取FuncID",
		"prefix": "var self.getFuncId",
		"body": [
			"var funcId = self.getFuncId();"
		]
	},
	"Print getParentFuncId": {
		"description": "声明: 子卡片获取父列表FuncID",
		"prefix": "var self.getParentFuncId",
		"body": [
			"var parentFuncId = self.getParentFuncId();"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// list
	// ------------------------------------------------------------------------------------------------------------------
	"Print get listDSPeek": {
		"description": "声明: 列表数据源Peek",
		"prefix": "var listDataSource.peek",
		"body": [
			"var listDataSourcePeek = self.listInstance().dataSource.tables('$1').peek();"
		]
	},
	"Print listDS": {
		"description": "声明: 列表数据源",
		"prefix": "var listDataSource",
		"body": [
			"var listDataSource = self.listInstance().dataSource;",
			"var ds$1 = listDataSource.tables('$1');",
			"var listCurrentItem = ds$1.defaultView().currentItem;",
		]
	},
	"Print listDS getValue": {
		"description": "声明: 列表数据源 获取字段值 [请先var listDataSource]",
		"prefix": "var listDataSource getValue",
		"body": [
			"var str$2 = ds$1.rows(0).getValue('$1_$2');",
			"var str$2 = listCurrentItem['$1_$2']();"
		]
	},
	"Print listDS setValue": {
		"description": "模板: 列表数据源 设置字段值 [请先var listDataSource]",
		"prefix": "temp list dataSource setValue",
		"body": [
			"ds$1.rows(0).setValue('$1_$2', '$3');",
			"currentItem.setValue('$1_$2', $3);"
		]
	},
	"Print get listDSTotalCount": {
		"description": "声明: 列表数据源 获取总记录数 [请先var listDataSource]",
		"prefix": "var listDataSource totalCount",
		"body": [
			"var totalCount = ds$1.defaultView().totalCount();"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// card
	// ------------------------------------------------------------------------------------------------------------------
	"Print get cardDSPeek": {
		"description": "声明: 卡片数据源Peek",
		"prefix": "var card dataSourcePeek",
		"body": [
			"var cardDataSourcePeek = self.cardInstance().dataSource.tables('$1').peek();",
		]
	},
	"Print get cardDS": {
		"description": "声明: 卡片数据源",
		"prefix": "var cardDataSource",
		"body": [
			"var cardDataSource = self.cardInstance().dataSource;",
			"var ds$1 = cardDataSource.tables('$1');",
			"var cardCurrentItem = ds$1.defaultView().currentItem;"
		]
	},
	"Print cardDS getValue": {
		"description": "声明: 卡片数据源 获取字段值 [请先var cardDataSource]",
		"prefix": "var cardDataSource getValue",
		"body": [
			"var str$2 = ds$1.rows(0).getValue('$1_$2');",
			"var str$2 = cardCurrentItem['$1_$2']();"
		]
	},
	"Print cardDS setValue": {
		"description": "模板: 卡片数据源 获取字段值 [请先var cardDataSource]",
		"prefix": "temp cardDataSource sefValue",
		"body": [
			"ds$1.rows(0).setValue('$1_$2', '$3');",
			"currentItem.setValue('$1_$2', '$3');"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// datagrid
	// ------------------------------------------------------------------------------------------------------------------
	"Print datagrid options": {
		"description": "模板: datagrid options [请先var datagrid]",
		"prefix": "var datagrid options",
		"body": [
			"var options = ${1:\\$dg1}.datagrid('options');",
		]
	},
	"Print datagrid": {
		"description": "声明: datagrid",
		"prefix": "var datagrid",
		"body": [
			"var ${1:\\$dg1} = $('#${2:XDataGrid1}');",
		]
	},
	"Print datagrid getRows": {
		"description": "声明: datagrid 当前页所有行 [请先var datagrid]",
		"prefix": "var datagrid get rows",
		"body": [
			"var allRows = ${1:\\$dg1}.datagrid('getRows');",
		]
	},
	"Print datagrid getCheckRowsArr": {
		"description": "声明: datagrid 获取checked行 [请先var datagrid]",
		"prefix": "var datagrid get checked row",
		"body": [
			"var checkRowsArr = ${1:\\$dg1}.datagrid('getChecked');",
		]
	},
	"Print datagrid getSelectRow": {
		"description": "声明: datagrid 获取selected行 [请先var datagrid]",
		"prefix": "var datagrid get selected row",
		"body": [
			"var selectRow = ${1:\\$dg1}.datagrid('getSelected');",
		]
	},
	"Print datagrid selectARow": {
		"description": "模板: datagrid 选中某一行 [请先var datagrid]",
		"prefix": "temp datagrid select a row",
		"body": [
			"${1:\\$dg1}.datagrid('checkRow', ${2:index});",
		]
	},
	"Print datagrid getSelectedIndex": {
		"description": "模板: datagrid 获取选中行index [请先var datagrid]",
		"prefix": "temp datagrid getSelectedIndex",
		"body": [
			"${1:\\$dg1}.datagrid('getSelectedIndex');",
		]
	},
	"Print datagrid unselectAll": {
		"description": "模板: datagrid 清空选择 [请先var datagrid]",
		"prefix": "temp datagrid unselectAll",
		"body": [
			"${1:\\$dg1}.datagrid('unselectAll');",
		]
	},
	"Print datagrid endEditAndRefreshRow": {
		"description": "模板: datagrid 结束编辑一行并刷新 [请先var datagrid]",
		"prefix": "temp datagrid endEdit and refreshRow",
		"body": [
			"${1:\\$dg1}.datagrid('endEdit', ${2:index}).datagrid('refreshRow', ${2:index});",
		]
	},
	"Print datagrid onBeforeSelect": {
		"description": "模板: datagrid 行选择前 [请先var datagrid options]",
		"prefix": "temp datagrid on beforeSelect",
		"body": [
			"${1:options}.onBeforeSelect(function (rowindex, rowData) {$2})",
		]
	},
	"Print datagrid onCheck": {
		"description": "模板: datagrid 行选中前 [请先var datagrid options]",
		"prefix": "temp datagrid on check",
		"body": [
			"${1:options}.onCheck(function (rowindex, rowData) {$2});",
		]
	},
	// 模板: datagrid 单元格编辑前
	"Print datagrid beforeEditCell": {
		"description": "模板: datagrid 单元格编辑前 [请先var datagrid]",
		"prefix": "temp datagrid beforeEditCell",
		"body": [
			"${1:\\$dg1}.on('beforeEditCell', function (e, opts) {",
			"\tif (opts.field == '$2') {$3}",
			"}"
		]
	},
	// 模板: datagrid 单元格编辑后
	"Print datagrid onAfterEdit": {
		"description": "模板: datagrid 单元格编辑后 [请先var datagrid]",
		"prefix": "temp datagrid onAfterEdit",
		"body": [
			"${1:\\$dg1}.on('onAfterEdit', function (e, rowIndex, rowData, changes) {",
			"\tfor (key in changes) {$2}",
			"}"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// smartDictLookup：智能帮助不建议声明变量，每次调用使用$获取ID即可
	// ------------------------------------------------------------------------------------------------------------------
	"Print smartDictLookup options": {
		"description": "声明: 智能帮助 options",
		"prefix": "var smartdictlookup options",
		"body": [
			"var ${2:options} = $('#${2:XSmartDictLookup1}').adplookupbox('options');"
		]
	},
	"Print smartDictLookup Condition": {
		"description": "模板: 智能帮助 过滤条件",
		"prefix": "temp smartdictlookup condition",
		"body": [
			"var adp = $('#${2:XSmartDictLookup1}').adplookupbox('options').adp;",
			"adp.condition = condition;",
		]
	},
	"Print smartDictLookup setValue": {
		"description": "模板: 智能帮助 赋值",
		"prefix": "temp smartdictlookup set value&text",
		"body": [
			"$('#${1:XSmartDictLookup1}').adplookupbox('setText', '$2');",
			"$('#${1:XSmartDictLookup1}').adplookupbox('setValue', '$3');",
		]
	},
	"Print smartDictLookup getValue": {
		"description": "模板: 智能帮助 取值",
		"prefix": "var smartdictlookup get value&text",
		"body": [
			"var ${1:value} = $('#${2:XSmartDictLookup1}').adplookupbox('getValue');",
			"var ${3:text} = $('#${2:XSmartDictLookup1}').adplookupbox('getText');",
		]
	},
	"Print smartDictLookup getSelectData": {
		"description": "模板: 智能帮助 获取当前选中行的数据源",
		"prefix": "var smartdictlookup get rowData",
		"body": [
			"var ${1:helpDataArr} = $('#${2:XSmartDictLookup1}').adplookupbox('textbox').data().rowData;",
		]
	},
	"Print smartDictLookup clear": {
		"description": "模板: 智能帮助 设置清空",
		"prefix": "temp smartdictlookup clear",
		"body": [
			"$('#${2:XSmartDictLookup1}').adplookupbox('clear')",
		]
	},
	"Print smartDictLookup readonly": {
		"description": "模板: 智能帮助 设置只读",
		"prefix": "temp smartdictlookup readonly",
		"body": [
			"$('#${2:XSmartDictLookup1}').adplookupbox('readonly', ${1:true})",
		]
	},
	"Print smartDictLookup required": {
		"description": "模板: 智能帮助 设置必填",
		"prefix": "temp smartdictlookup required",
		"body": [
			"$('#${2:XSmartDictLookup1}').adplookupbox('textbox').validatebox('options').required = true;"
		]
	},
	"Print smartDictLookup onFocus": {
		"description": "模板: 智能帮助 绑定焦点事件",
		"prefix": "temp smartdictlookup on focus&blur",
		"body": [
			"$('#${1:XSmartDictLookup1}').adplookupbox('textbox').on('focus', function () {$2}).on('blur', function () {$3});"
		]
	},
	"Print smartDictLookup alertIframe": {
		"description": "模板: 智能帮助 点击帮助事件",
		"prefix": "temp smartdictlookup on click",
		"body": [
			"$('#${1:XSmartDictLookup1}').data('adplookupbox').\\$arrow.off('click').on('click.${2:AnyWordButMust}', function () {",
			"\t// temp iframe dialog",
			"})",
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// select 下拉选择框
	// ------------------------------------------------------------------------------------------------------------------
	"Print selector options": {
		"description": "声明: 下拉选择框 options",
		"prefix": "var selector options",
		"body": [
			"var options = $('#${1:XSelector1}').combo2('options');"
		]
	},
	"Print selector setValue": {
		"description": "模板: 下拉选择框 赋值",
		"prefix": "var selector set value&text",
		"body": [
			"$('#${1:XSelector1}').combo2('setValue', '$2');",
			"$('#${1:XSelector1}').combo2('setText', '$3');",
		]
	},
	"Print selector getValue": {
		"description": "模板: 下拉选择框 取值",
		"prefix": "var selector get value&text",
		"body": [
			"var ${1:value} = $('#${2:XSelector1}').combo2('getValue');",
			"var ${3:text} = $('#${2:XSelector1}').combo2('getText');",
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// my97datebox 日期控件
	// ------------------------------------------------------------------------------------------------------------------
	"Print my97datebox options": {
		"description": "声明: 日期控件 options",
		"prefix": "var my97datebox options",
		"body": [
			"var options = $('#${1:My97Datebox1}').data().my97.options;"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// numberbox 数值控件
	// ------------------------------------------------------------------------------------------------------------------
	"Print numberbox options": {
		"description": "声明: 数值控件 options",
		"prefix": "var calculator options",
		"body": [
			"var options = $('#${1:$XCalculator1}').numberbox('options');"
		]
	},
	"Print numberbox setValue": {
		"description": "模板: 下拉选择框 赋值",
		"prefix": "var numberbox set value",
		"body": [
			"$('#${1:XCalculator1}').combo2('setValue', '$2');"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// 状态机
	// ------------------------------------------------------------------------------------------------------------------
	"Print stateMachine cancelTransit": {
		"description": "模板: 阻止状态机迁移",
		"prefix": "temp stateMachine cancelTransit",
		"body": [
			"self.context.setParam('cancelTransit', true);"
		]
	},
	"Print stateMachine transitInvoke": {
		"description": "模板: 状态机迁移到某一状态",
		"prefix": [
			"temp stateMachine transitInvoke",
			"temp self.context.view().transitInvoke"
		],
		"body": [
			"self.context.view().transitInvoke('${1:Save}');"
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// iframe&dialog
	// ------------------------------------------------------------------------------------------------------------------
	"Print iframeDialog": {
		"description": "模板: 父子表单弹框模板",
		"prefix": "temp iframe dialog",
		"body": [
			"if ($('#${1:IFrame1Dialog}').data('dialog')) {",
			"\t$('#${1:IFrame1Dialog}').dialog('show').then(function() {$4})",
			"}",
			"else {",
			"\tvar dlg = $('#${1:IFrame1Dialog}').dialog({",
			"\t\twidth: ${2:7}00,",
			"\t\theight: ${3:4}00,",
			"\t\tonLoad: function () {$4}",
			"\t})",
			"\tdlg.dialog('show');",
			"}",
		]
	},
	// ------------------------------------------------------------------------------------------------------------------
	// jQuery&easyui
	// ------------------------------------------------------------------------------------------------------------------
	"Print onFrameClose": {
		"description": "模板: 注册框架关闭前事件",
		"prefix": "temp on frameclose",
		"body": [
			"$(document).on('frameclose', function () {$1})"
		]
	},
	"Print onFrameShow": {
		"description": "模板: 注册框架显示前事件",
		"prefix": "temp on frameshow",
		"body": [
			"$(document).on('frameshow', function () {$1})"
		]
	},
}